# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NewPassword(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, old_password: str=None, new_password: str=None):  # noqa: E501
        """NewPassword - a model defined in Swagger

        :param old_password: The old_password of this NewPassword.  # noqa: E501
        :type old_password: str
        :param new_password: The new_password of this NewPassword.  # noqa: E501
        :type new_password: str
        """
        self.swagger_types = {
            'old_password': str,
            'new_password': str
        }

        self.attribute_map = {
            'old_password': 'old_password',
            'new_password': 'new_password'
        }
        self._old_password = old_password
        self._new_password = new_password

    @classmethod
    def from_dict(cls, dikt) -> 'NewPassword':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewPassword of this NewPassword.  # noqa: E501
        :rtype: NewPassword
        """
        return util.deserialize_model(dikt, cls)

    @property
    def old_password(self) -> str:
        """Gets the old_password of this NewPassword.

        Senha antiga do usu치rio  # noqa: E501

        :return: The old_password of this NewPassword.
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password: str):
        """Sets the old_password of this NewPassword.

        Senha antiga do usu치rio  # noqa: E501

        :param old_password: The old_password of this NewPassword.
        :type old_password: str
        """
        if old_password is None:
            raise ValueError("Invalid value for `old_password`, must not be `None`")  # noqa: E501

        self._old_password = old_password

    @property
    def new_password(self) -> str:
        """Gets the new_password of this NewPassword.

        Nova senha do usu치rio  # noqa: E501

        :return: The new_password of this NewPassword.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password: str):
        """Sets the new_password of this NewPassword.

        Nova senha do usu치rio  # noqa: E501

        :param new_password: The new_password of this NewPassword.
        :type new_password: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")  # noqa: E501

        self._new_password = new_password
